version: '3.8'

services:
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: wtime
      POSTGRES_PASSWORD: wtimepassword
      POSTGRES_DB: sgautomacao
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always  # Reinicia automaticamente se falhar
    networks:
      - orchestrator_network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"  # Porta da interface web do RabbitMQ
      - "5672:5672"    # Porta padrão do RabbitMQ
    networks:
      - orchestrator_network

  django:
    build: .
    command: gunicorn apps.core.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/apps
    env_file:
      - .env
    environment:
      - PYTHONPATH=/apps
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CREATE_SUPERUSER=true # Sinaliza para o entrypoint criar o superusuário
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    depends_on:
      - db
      - rabbitmq
    restart: always
    networks:
      - orchestrator_network

  celery_worker:
    build: .
    command: celery -A apps.core worker --loglevel=info
    volumes:
      - .:/apps
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    depends_on:
      - rabbitmq
      - db
    networks:
      - orchestrator_network

  celery_beat:
    build: .
    command: celery -A apps.core beat --loglevel=info
    volumes:
      - .:/apps
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    depends_on:
      - rabbitmq
      - db
    networks:
      - orchestrator_network

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./apps/staticfiles:/apps/apps/staticfiles 
      - ./apps/media:/apps/media 
    ports:
      - "80:80"  # Porta padrão do Nginx
    depends_on:
      - django
    networks:
      - orchestrator_network

  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    command: http nginx:80
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml  # Mapeando o arquivo ngrok.yml
    ports:
      - "4040:4040"
    depends_on:
      - django
    networks:
      - orchestrator_network


  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - orchestrator_network

  portainer:
    image: portainer/portainer-ce
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9000:9000"
    networks:
      - orchestrator_network


volumes:
  postgres_data:
  portainer_data:

networks:
  orchestrator_network:
